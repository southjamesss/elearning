import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

const PlaygroundPage = () => {
  const navigate = useNavigate();
  const [code, setCode] = useState("");
  const [language, setLanguage] = useState("javascript"); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô JavaScript
  const [output, setOutput] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const languages = [
    { label: "JavaScript", value: "javascript" },
    { label: "Python", value: "python" },
    { label: "Java", value: "java" },
    { label: "C++", value: "cpp" },
    { label: "C#", value: "csharp" },
    { label: "PHP", value: "php" },
    { label: "Go", value: "go" },
    { label: "Ruby", value: "ruby" },
    { label: "Swift", value: "swift" },
  ];

  const handleRunCode = async () => {
    if (!code.trim()) {
      setOutput("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô");
      return;
    }

    setIsLoading(true);
    setOutput("");

    try {
      const response = await fetch("http://localhost:3000/run-code", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ code, language }),
      });

      const data = await response.json();
      if (response.ok) {
        setOutput(data.output || "‚úÖ ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå");
      } else {
        setOutput(`‚ö†Ô∏è Error: ${data.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"}`);
      }
    } catch (error) {
      setOutput(`‚ùó Error: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î</h1>
        <button
          onClick={() => navigate(-1)}
          className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
        >
          ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        </button>
      </div>

      {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ */}
      <div className="mb-4">
        <label className="block font-medium mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤:</label>
        <select
          className="p-2 border rounded w-full"
          value={language}
          onChange={(e) => setLanguage(e.target.value)}
        >
          {languages.map((lang) => (
            <option key={lang.value} value={lang.value}>
              {lang.label}
            </option>
          ))}
        </select>
      </div>

      {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î */}
      <textarea
        className="w-full h-60 p-4 border rounded mb-4 font-mono"
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
        value={code}
        onChange={(e) => setCode(e.target.value)}
      ></textarea>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î */}
      <button
        onClick={handleRunCode}
        className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        disabled={isLoading}
      >
        {isLoading ? "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô..." : "‚ñ∂ ‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î"}
      </button>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
      <div className="mt-6 p-4 bg-gray-100 border rounded">
        <h2 className="text-lg font-semibold">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</h2>
        <pre className="whitespace-pre-wrap">{output}</pre>
      </div>
    </div>
  );
};

export default PlaygroundPage;