import React, { useState } from "react";
import axios from "axios"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ axios

const Chatbot = () => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState("");
    const [loading, setLoading] = useState(false); // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Ollama
    const sendMessage = async () => {
        if (input.trim()) {
            const userMessage = { sender: "user", text: input };
            setMessages([...messages, userMessage]);
            setInput("");
            setLoading(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î

            try {
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Ollama API
                const response = await axios.post("http://127.0.0.1:11434/api/generate", {
                    model: "llama3", // ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• llama3
                    system: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢Chat ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
                    prompt: `‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: ${input}`, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                    stream: false, // ‡∏õ‡∏¥‡∏î stream (‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
                });

                const botMessage = { sender: "bot", text: response.data.response };
                setMessages((prev) => [...prev, botMessage]);
            } catch (error) {
                console.error("Error communicating with Ollama:", error);
                setMessages((prev) => [...prev, { sender: "bot", text: "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ üò¢" }]);
            } finally {
                setLoading(false); // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            }
        }
    };

    return (
        <div className="flex flex-col h-96 w-full bg-white border border-gray-300 rounded-lg shadow-lg">
            {/* Header */}
            <div className="bg-black text-white py-3.5 px-4 font-bold rounded-t-lg text-center">
                ‡∏™‡∏°‡∏ä‡∏≤‡∏¢Chat
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-2">
                {messages.map((msg, index) => (
                    <div key={index} className={`flex ${msg.sender === "user" ? "justify-end" : "justify-start"}`}>
                        <div
                            className={`p-3 rounded-lg max-w-xs text-white ${msg.sender === "user" ? "bg-blue-500" : "bg-gray-300 text-black"}`}
                        >
                            {msg.text}
                        </div>
                    </div>
                ))}
                {loading && <div className="text-gray-500 text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...</div>}
            </div>

            {/* Input */}
            <div className="border-t p-2 flex">
                <input
                    type="text"
                    className="flex-1 p-2 border border-gray-300 rounded-l-lg focus:outline-none"
                    placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={(e) => {
                        if (e.key === "Enter") {
                            sendMessage();
                        }
                    }}
                />
                <button
                    onClick={sendMessage}
                    className="bg-black text-white px-4 py-2 rounded-r-lg hover:bg-blue-600"
                    disabled={loading}
                >
                    {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á..." : "‡∏™‡πà‡∏á"}
                </button>
            </div>
        </div>
    );
};

export default Chatbot;